"use strict";function _defineProperty(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}const e=React.createElement;class Widget extends React.Component{constructor(e){super(e),_defineProperty(this,"geoFindMe",async()=>{const e=e=>{let t={lat:null,lng:null};t.lat=e.coords.latitude,t.lng=e.coords.longitude,this.fetchForecast(t)},t=()=>{console.log("Unable to retrieve your location"),this.setState({forecast:"Unable to fetch forecast!"})};navigator.geolocation?navigator.geolocation.getCurrentPosition(e,t):(console.log("Geolocation is not supported by your browser"),this.setState({forecast:"Geolocation not supported!"}))}),_defineProperty(this,"fetchForecast",async e=>{let t=await fetch(`/forecast?lat=${e.lat}&lng=${e.lng}`,{mode:"cors"}),o=await t.json();o?this.setState({fetchDone:!0,forecast:o}):this.setState({error:o.error})}),this.state={forecast:"Fetching...",fecthDone:!1,error:null}}componentDidMount(){this.geoFindMeID=setInterval(()=>this.geoFindMe(),6e4),this.geoFindMe()}componentWillUnmount(){clearInterval(this.getFindMeID)}render(){let t;return t=this.state.fetchDone?e("div",null,e("br"),e("small",null,this.state.forecast.name),e("br"),e("small",null,this.state.forecast.shortForecast),e("br"),e("small",null,this.state.forecast.temperature),e("small",{dangerouslySetInnerHTML:{__html:"&deg;"}},null),e("small",null,this.state.forecast.temperatureUnit),e("br"),e("small",null,`${this.state.forecast.windSpeed} - ${this.state.forecast.windDirection}`),e("br")):this.state.error?e("small",null,this.state.error):e("small",null,"Fetching..."),t}}const domContainer=document.querySelector("#morning");ReactDOM.render(e(Widget),domContainer);